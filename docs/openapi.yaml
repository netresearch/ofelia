openapi: 3.0.3
info:
  title: Ofelia Job Scheduler API
  description: REST API for Ofelia Docker job scheduler with authentication and metrics
  version: 1.1.0
  contact:
    name: Ofelia Support
    url: https://github.com/netresearch/ofelia
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://ofelia.example.com
    description: Production server

security:
  - BearerAuth: []
  - CookieAuth: []

paths:
  /login:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  format: password
                  example: secret123
      responses:
        '200':
          description: Authentication successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth_token=abc123; Path=/; HttpOnly; Secure; SameSite=Strict
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expires_in:
                    type: number
                    example: 3600
        '401':
          description: Invalid credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid credentials
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: Invalid request body

  /logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            text/plain:
              schema:
                type: string
                example: Logged out successfully

  /metrics:
    get:
      summary: Get Prometheus metrics
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Prometheus metrics in text format
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP ofelia_jobs_total Total number of jobs executed
                  # TYPE ofelia_jobs_total counter
                  ofelia_jobs_total 42
                  
                  # HELP ofelia_jobs_running Number of currently running jobs
                  # TYPE ofelia_jobs_running gauge
                  ofelia_jobs_running 3

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                    example: healthy
                  uptime:
                    type: number
                    description: Uptime in seconds
                    example: 3600
                  version:
                    type: string
                    example: "1.1.0"
                  checks:
                    type: object
                    properties:
                      docker:
                        type: boolean
                        example: true
                      scheduler:
                        type: boolean
                        example: true
        '503':
          description: Service unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unhealthy
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Docker connection failed"]

  /jobs:
    get:
      summary: List all jobs
      tags:
        - Jobs
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [all, running, scheduled, disabled]
            default: all
          description: Filter jobs by status
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /jobs/{jobName}:
    parameters:
      - name: jobName
        in: path
        required: true
        schema:
          type: string
        description: Name of the job
    
    get:
      summary: Get job details
      tags:
        - Jobs
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      summary: Run job manually
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                wait:
                  type: boolean
                  default: false
                  description: Wait for job completion
      responses:
        '200':
          description: Job started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: "job-123"
                  status:
                    type: string
                    example: "started"
        '404':
          description: Job not found
        '409':
          description: Job already running
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    delete:
      summary: Disable job
      tags:
        - Jobs
      responses:
        '200':
          description: Job disabled
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/Unauthorized'

  /jobs/{jobName}/enable:
    parameters:
      - name: jobName
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Enable job
      tags:
        - Jobs
      responses:
        '200':
          description: Job enabled
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/Unauthorized'

  /jobs/{jobName}/history:
    parameters:
      - name: jobName
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get job execution history
      tags:
        - Jobs
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Job history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobExecution'
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: JWT token authentication
    
    CookieAuth:
      type: apiKey
      in: cookie
      name: auth_token
      description: Session cookie authentication

  schemas:
    Job:
      type: object
      properties:
        name:
          type: string
          example: "backup-database"
        schedule:
          type: string
          example: "0 2 * * *"
        command:
          type: string
          example: "pg_dump database > backup.sql"
        type:
          type: string
          enum: [local, exec, run, service, compose]
          example: "exec"
        status:
          type: string
          enum: [scheduled, running, disabled]
          example: "scheduled"
        lastRun:
          type: string
          format: date-time
          example: "2024-01-15T02:00:00Z"
        nextRun:
          type: string
          format: date-time
          example: "2024-01-16T02:00:00Z"

    JobDetails:
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            container:
              type: string
              example: "postgres-db"
              description: For exec jobs
            image:
              type: string
              example: "alpine:latest"
              description: For run jobs
            network:
              type: string
              example: "bridge"
            environment:
              type: array
              items:
                type: string
              example: ["DB_HOST=localhost", "DB_USER=admin"]
            volumes:
              type: array
              items:
                type: string
              example: ["/data:/backup"]
            user:
              type: string
              example: "root"
            workingDir:
              type: string
              example: "/app"

    JobExecution:
      type: object
      properties:
        executionId:
          type: string
          example: "exec-456"
        startTime:
          type: string
          format: date-time
          example: "2024-01-15T02:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2024-01-15T02:05:30Z"
        duration:
          type: number
          description: Duration in seconds
          example: 330
        status:
          type: string
          enum: [success, failure, timeout]
          example: "success"
        exitCode:
          type: integer
          example: 0
        output:
          type: string
          example: "Backup completed successfully"
        error:
          type: string
          example: ""

  responses:
    Unauthorized:
      description: Authentication required
      content:
        text/plain:
          schema:
            type: string
            example: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer realm="Ofelia"