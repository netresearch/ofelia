# direnv project setup for Ofelia
# Development environment enforcement and setup

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load .env if present
if [ -f .env ]; then
  dotenv .env
fi

# Environment verification and setup
echo -e "${BLUE}üîß Verifying Ofelia development environment...${NC}"

# Check Go version requirement
if ! command -v go &> /dev/null; then
    echo -e "${RED}‚ùå Go not found. Please install Go 1.25+${NC}"
    exit 1
fi

GO_VERSION=$(go version | grep -o 'go[0-9]\+\.[0-9]\+' | sed 's/go//')
REQUIRED_VERSION="1.25"

if ! echo "$GO_VERSION $REQUIRED_VERSION" | awk '{exit ($1 < $2)}'; then
    echo -e "${GREEN}‚úÖ Go $GO_VERSION detected${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Go $GO_VERSION found, but Go $REQUIRED_VERSION+ is recommended for this project${NC}"
fi

# Check for required development tools
check_tool() {
    local tool=$1
    local install_hint=$2
    
    if command -v "$tool" &> /dev/null; then
        echo -e "${GREEN}‚úÖ $tool available${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $tool missing: $install_hint${NC}"
        return 1
    fi
}

echo -e "${BLUE}üõ†Ô∏è  Checking required tools...${NC}"
check_tool "golangci-lint" "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
check_tool "gosec" "sudo snap install gosec (or download from https://github.com/securecodewarrior/gosec/releases)" 
check_tool "docker" "https://docs.docker.com/get-docker/"

# CRITICAL: Git hooks verification and enforcement
echo ""
echo -e "${BLUE}ü™ù Verifying Git hooks setup...${NC}"

HOOK_FILE=".git/hooks/pre-commit"
HUSKY_HOOK=".husky/pre-commit"
HOOKS_CONFIGURED=false

if [[ -f "$HOOK_FILE" ]] && grep -q "Running linters in parallel" "$HOOK_FILE" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Native Git hooks properly configured${NC}"
    HOOKS_CONFIGURED=true
elif [[ -f "$HUSKY_HOOK" ]] && [[ -f "package.json" ]]; then
    echo -e "${GREEN}‚úÖ Husky hooks properly configured${NC}"
    HOOKS_CONFIGURED=true
fi

if [[ "$HOOKS_CONFIGURED" == "false" ]]; then
    echo -e "${RED}‚ùå CRITICAL: Git hooks not configured!${NC}"
    echo -e "${YELLOW}   Without pre-commit hooks, your commits WILL FAIL the CI pipeline${NC}"
    echo ""
    echo -e "${YELLOW}üîß Choose hook installation method:${NC}"
    echo -e "   ${BLUE}Native (recommended):${NC} ./scripts/install-hooks.sh"
    echo -e "   ${BLUE}Husky (Node.js teams):${NC} ./scripts/install-husky.sh"
    echo ""
    
    # Auto-install option
    if [[ -t 0 ]]; then  # Only if running interactively
        read -p "ü§î Auto-install native Git hooks now? [Y/n] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
            echo -e "${BLUE}üîß Installing native Git hooks...${NC}"
            if ./scripts/install-hooks.sh >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Hooks installed successfully!${NC}"
            else
                echo -e "${RED}‚ùå Hook installation failed - please run manually${NC}"
            fi
        fi
    fi
fi

# Set Go-specific environment variables
export CGO_ENABLED=0
export GOOS=linux  
export GOARCH=amd64

# Add project tools to PATH
if command -v go >/dev/null 2>&1; then
  export PATH="$(go env GOPATH)/bin:$PATH"
fi

if [[ -d "./bin" ]]; then
    # Use PATH_add if available (direnv), otherwise manual PATH update
    if command -v PATH_add >/dev/null 2>&1; then
        PATH_add "./bin"
    else
        export PATH="./bin:$PATH"
    fi
fi

# Development convenience aliases - Use Make commands for consistency
alias gci-fix='make gci-fix'
alias lint-fix='make lint-fix'  
alias lint-full='make lint-full'
alias test-coverage='make test-coverage-html'
alias test-watch='make test-watch'
alias dev-check='make dev-check'
alias precommit='make precommit'

echo ""
echo -e "${GREEN}‚úÖ Development environment ready!${NC}"

# Print helpful project info
echo ""
echo -e "${BLUE}üìã Ofelia (Go Docker Job Scheduler)${NC}"
echo ""
echo -e "${YELLOW}üöÄ Quick Commands:${NC}"
echo "  make help       # Show all available commands"
echo "  make build      # Build binary"  
echo "  make test       # Run tests (current: 60.1% coverage)"
echo "  make lint-full  # Complete linting suite (45+ rules)"
echo "  make dev-check  # Run all development checks"
echo "  make dev-setup  # Set up development environment"
echo ""
echo -e "${YELLOW}üîß Development Aliases (via Make):${NC}"
echo "  gci-fix         # make gci-fix - Fix import grouping"
echo "  lint-fix        # make lint-fix - Auto-fix linting issues"  
echo "  lint-full       # make lint-full - Complete linting suite"
echo "  test-coverage   # make test-coverage-html - HTML coverage report"
echo "  test-watch      # make test-watch - Continuous testing"
echo "  dev-check       # make dev-check - All development checks"
echo "  precommit       # make precommit - Pre-commit validation"
echo ""
echo -e "${YELLOW}üìö Documentation:${NC}"
echo "  docs/DEVELOPMENT.md   # Development setup & guidelines"
echo "  docs/PROJECT_INDEX.md # Architecture overview"
echo "  README.md            # Getting started"
echo ""
echo -e "${BLUE}Go version:${NC} $(go version 2>/dev/null || echo 'Go not found')"
echo ""
echo -e "${GREEN}üõ°Ô∏è All commits automatically linted via pre-commit hooks${NC}"
